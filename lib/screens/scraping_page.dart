import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:mybiz_app/widgets/main_header.dart';
import 'package:mybiz_app/widgets/main_page_layout.dart';
import 'package:mybiz_app/widgets/common_styles.dart';
import 'package:mybiz_app/screens/naver_link_page.dart';
import 'package:mybiz_app/services/naver_link_service.dart';
import 'package:mybiz_app/services/review_scraper_service.dart';
import 'package:mybiz_app/services/user_data_service.dart';
import 'revenue_analysis_page.dart';

class ScrapingPage extends StatefulWidget {
  const ScrapingPage({super.key});

  @override
  State<ScrapingPage> createState() => _ScrapingPageState();
}

class _ScrapingPageState extends State<ScrapingPage> {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  bool _isAnalyzing = false;
  bool _hasError = false;
  String _errorMessage = '';
  bool _showAnalysisResults = true; // Î∂ÑÏÑù Í≤∞Í≥º ÌëúÏãú Ïó¨Î∂Ä
  bool _hasData = false; // Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä (Í∏∞Î≥∏: ÏóÜÏùå)

  final ReviewScraperService _scraper = ReviewScraperService();
  final NaverLinkService _naverService = NaverLinkService();
  bool _isLinked = false; // ÎÑ§Ïù¥Î≤Ñ Ïó∞Îèô Ïó¨Î∂Ä

  @override
  void initState() {
    super.initState();
    _fetchIntegrationStatus();
  }

  Future<void> _fetchIntegrationStatus() async {
    try {
      final userStoreId = await UserDataService.getUserStoreId();
      if (userStoreId == null || userStoreId.isEmpty) {
        setState(() {
          _isLinked = false;
        });
        return;
      }
      final res = await _naverService.status(userStoreId: userStoreId);
      final data = (res['data'] as Map?) ?? {};
      final integration = (data['integration'] as Map?) ?? {};
      final hasCred = integration['has_credentials'] == true;
      final status = (integration['integration_status'] as String?) ?? 'not_configured';
      final linked = hasCred && (status == 'configured' || status == 'active');
      setState(() {
        _isLinked = linked;
      });
    } catch (_) {
      setState(() {
        _isLinked = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return MainPageLayout(
      selectedIndex: 2,
      child: Column(
        children: [
          const MainHeader(title: 'Î¶¨Î∑∞Î∂ÑÏÑù'),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildAnalysisTypeButtons(),
                  const SizedBox(height: 24),
                  

                  
                  // Î°úÎî© ÏÉÅÌÉú Ïπ¥ÎìúÎäî ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå (Î≤ÑÌäº ÏûêÎ¶¨ÏóêÏÑú Î°úÎî© Ï≤òÎ¶¨)
                  
                  // Ïò§Î•ò ÏÉÅÌÉú ÌëúÏãú
                  if (_hasError) ...[
                    _buildErrorSection(),
                    const SizedBox(height: 24),
                  ],
                  
                  // Î∂ÑÏÑù Í≤∞Í≥º ÌëúÏãú
                  if (_showAnalysisResults && !_isAnalyzing && !_hasError) ...[
                    if (!_hasData) ...[
                      _buildNoDataSection(),
                      const SizedBox(height: 24),
                    ] else ...[
                      _buildCustomerSatisfactionSection(),
                      const SizedBox(height: 24),
                      _buildRecentReviewsSection(),
                      const SizedBox(height: 24),
                      _buildGoodPointsSection(),
                      const SizedBox(height: 24),
                      _buildImprovementAreasSection(),
                      const SizedBox(height: 24),
                      // Ïï°ÏÖò Î≤ÑÌäºÎì§ (Ïä§ÌÅ¨ÎûòÌïë ÏôÑÎ£å ÌõÑÏóêÎßå ÌëúÏãú)
                      _buildActionButtons(),
                      const SizedBox(height: 24),
                    ],
                  ],
                  
                  const SizedBox(height: 100), // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î ÎÜíÏù¥ÎßåÌÅº Ïó¨Î∞± Ï∂îÍ∞Ä
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  // ========== Î¨¥Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú ==========
  Widget _buildNoDataSection() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          const SizedBox(height: 10),
          Text(
            _isLinked ? 'Î¶¨Î∑∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥Ïöî üò≠' : 'ÎÑ§Ïù¥Î≤Ñ Ïä§ÎßàÌä∏ÌîåÎ†àÏù¥Ïä§\nÏó∞ÎèôÌï¥Ï£ºÏÑ∏Ïöî üò≠',
            textAlign: TextAlign.center,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w700,
              letterSpacing: -0.8,
              color: Color(0xFF333333),
            ),
          ),
          const SizedBox(height: 12),
          Text(
            _isAnalyzing
                ? 'Ïó¥Ïã¨Ìûà Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§!üßê\nÏµúÏã† Î¶¨Î∑∞Î•º Î™®ÏúºÍ≥† ÏûàÏñ¥Ïöî... Ïû†ÏãúÎßåÏöî!'
                : (_isLinked
                    ? 'Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏµúÏã† Î¶¨Î∑∞ Î∂ÑÏÑùÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî!'
                    : 'ÎÑ§Ïù¥Î≤Ñ ÌîåÎ†àÏù¥Ïä§ Ïó∞Îèô ÌõÑ Î¶¨Î∑∞ Î∂ÑÏÑùÏùÑ Ïù¥Ïö©Ìï† Ïàò ÏûàÏñ¥Ïöî'),
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[600],
              letterSpacing: -0.8,
            ),
          ),
          const SizedBox(height: 16),
          if (!_isLinked) ...[
            SizedBox(
              width: double.infinity,
              height: 48,
              child: Container(
                decoration: BoxDecoration(
                  gradient: CommonStyles.brandGradient,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).push(
                      MaterialPageRoute(builder: (_) => const NaverLinkPage()),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.transparent,
                    shadowColor: Colors.transparent,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  child: const Text(
                    'ÎÑ§Ïù¥Î≤Ñ ÌîåÎ†àÏù¥Ïä§ Ïó∞ÎèôÌïòÎü¨ Í∞ÄÍ∏∞',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                      letterSpacing: -0.8,
                    ),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 10),
          ],
          if (_isLinked) ...[
            SizedBox(
              width: double.infinity,
              height: 48,
              child: _isAnalyzing
                  ? Center(
                      child: SizedBox(
                        width: 24,
                        height: 24,
                        child: const CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF00AEFF)),
                        ),
                      ),
                    )
                  : OutlinedButton(
                      onPressed: _requestScraping,
                      style: OutlinedButton.styleFrom(
                        side: const BorderSide(color: Color(0xFFE5E5E5), width: 1),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text(
                        'Î¶¨Î∑∞ Î∂ÑÏÑùÌïòÍ∏∞',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF333333),
                          letterSpacing: -0.8,
                        ),
                      ),
                    ),
            ),
            const SizedBox(height: 8),
          ],
        ],
      ),
    );
  }

  Widget _buildAnalysisTypeButtons() {
    return Container(
      height: 56,
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
      ),
      child: Row(
        children: [
          Expanded(
            child: GestureDetector(
              onTap: () {
                Navigator.pushReplacement(
                  context,
                  PageRouteBuilder(
                    pageBuilder: (context, animation, secondaryAnimation) => const RevenueAnalysisPage(),
                    transitionDuration: Duration.zero,
                    reverseTransitionDuration: Duration.zero,
                  ),
                );
              },
              child: Container(
                height: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
                ),
                child: const Center(
                  child: Text(
                    'Îß§Ï∂ú Î∂ÑÏÑù',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w700,
                      letterSpacing: -0.55,
                      color: Color(0xFF999999),
                    ),
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(width: 6),
          Expanded(
            child: GestureDetector(
              onTap: () {},
              child: Container(
                height: double.infinity,
                decoration: BoxDecoration(
                  gradient: CommonStyles.brandGradient,
                  borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
                ),
                child: const Center(
                  child: Text(
                    'Î¶¨Î∑∞Î∂ÑÏÑù',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w700,
                      letterSpacing: -0.55,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCustomerSatisfactionSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Í≥†Í∞ù ÎßåÏ°±ÎèÑ Î∂ÑÏÑù',
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            letterSpacing: -0.8,
            color: Color(0xFF333333),
          ),
        ),
        const SizedBox(height: 15),
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(CommonStyles.chipRadius),
                child: SizedBox(
                  width: double.infinity,
                  height: 15,
                  child: Row(
                    children: [
                      Expanded(
                        flex: 75,
                        child: Container(
                          height: double.infinity,
                          color: const Color(0xFF9BDFFF),
                        ),
                      ),
                      Expanded(
                        flex: 15,
                        child: Container(
                          height: double.infinity,
                          color: const Color(0xFFFFCB9B),
                        ),
                      ),
                      Expanded(
                        flex: 10,
                        child: Container(
                          height: double.infinity,
                          color: const Color(0xFFFF9B9B),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Container(
                        width: 5,
                        height: 5,
                        decoration: const BoxDecoration(
                          color: Color(0xFFBBDDFF),
                          shape: BoxShape.circle,
                        ),
                      ),
                      const SizedBox(width: 5),
                                              const Text(
                          'Í∏çÏ†ï (75%)',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                            letterSpacing: -0.8,
                            color: Color(0xFF333333),
                          ),
                        ),
                    ],
                  ),
                  Row(
                    children: [
                      Container(
                        width: 5,
                        height: 5,
                        decoration: const BoxDecoration(
                          color: Color(0xFFFFCB9B),
                          shape: BoxShape.circle,
                        ),
                      ),
                      const SizedBox(width: 5),
                                              const Text(
                          'Î≥¥ÌÜµ (15%)',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                            letterSpacing: -0.8,
                            color: Color(0xFF333333),
                          ),
                        ),
                    ],
                  ),
                  Row(
                    children: [
                      Container(
                        width: 5,
                        height: 5,
                        decoration: const BoxDecoration(
                          color: Color(0xFFFFBBBB),
                          shape: BoxShape.circle,
                        ),
                      ),
                      const SizedBox(width: 5),
                                              const Text(
                          'Î∂ÄÏ†ï (10%)',
                          style: TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w500,
                            letterSpacing: -0.8,
                            color: Color(0xFF333333),
                          ),
                        ),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRecentReviewsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'ÏµúÍ∑º Îì±Î°ùÎêú Î¶¨Î∑∞',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            letterSpacing: -0.8,
            color: Color(0xFF333333),
          ),
        ),
        const SizedBox(height: 16),
        Column(
          children: [
            _buildReviewItem('ÏóêÎ≤†Î≤†Í≤åÎ≤±', 'ÏùåÏãùÎèÑ ÎßõÏûàÍ≥† ÏÇ¨Ïû•ÎãòÏù¥ Ï†ïÎßê ÏπúÏ†àÌï¥Ïöî!', 'ÏùåÏãùÏù¥ÌÉàÎ¶¨ÎÇòÏôÄÏöî', 'Î∞©Î¨∏Ïùº:7.27'),
            const SizedBox(height: 12),
            _buildReviewItem('ÏóêÎ≤†Î≤†Í≤åÎ≤±', 'ÏùåÏãùÎèÑ ÎßõÏûàÍ≥† ÏÇ¨Ïû•ÎãòÏù¥ Ï†ïÎßê ÏπúÏ†àÌï¥Ïöî! ÏùåÏãùÎèÑ ÎßõÏûàÍ≥† ÏÇ¨Ïû•ÎãòÏù¥ Ï†ïÎßê ÏπúÏ†àÌï¥Ïöî! ÏùåÏãùÎèÑ ÎßõÏûàÍ≥† ÏÇ¨Ïû•ÎãòÏù¥ Ï†ïÎßê ÏπúÏ†àÌï¥Ïöî!', 'ÏùåÏãùÏù¥ÌÉàÎ¶¨ÎÇòÏôÄÏöî', 'Î∞©Î¨∏Ïùº:7.27'),
            const SizedBox(height: 12),
            _buildReviewItem('ÏóêÎ≤†Î≤†Í≤åÎ≤±', 'ÏùåÏãùÎèÑ ÎßõÏûàÍ≥† ÏÇ¨Ïû•ÎãòÏù¥ Ï†ïÎßê ÏπúÏ†àÌï¥Ïöî!', 'ÏúºÏïÑÏïÑÏïÑÏïÖ', 'Î∞©Î¨∏Ïùº:7.27'),
          ],
        ),
      ],
    );
  }

  Widget _buildReviewItem(String userId, String reviewText, String tag, String visitDate) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                userId,
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  letterSpacing: -0.8,
                  color: Color(0xFF333333),
                ),
              ),
              Text(
                visitDate,
                style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w400,
                  letterSpacing: -0.8,
                  color: Color(0xFF999999),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            reviewText,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w400,
              letterSpacing: -0.8,
              color: Color(0xFF666666),
              height: 1.5,
            ),
          ),
          const SizedBox(height: 12),
          Align(
            alignment: Alignment.centerRight,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
              decoration: BoxDecoration(
                color: const Color(0xFFF8F9FA),
                borderRadius: BorderRadius.circular(CommonStyles.chipRadius),
              ),
              child: Text(
                tag,
                style: const TextStyle(
                  fontSize: 11,
                  fontWeight: FontWeight.w500,
                  letterSpacing: -0.8,
                  color: Color(0xFF666666),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGoodPointsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Ïù¥Îü∞ Ï†êÏù¥ Ï¢ãÏïÑÏöî!',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            letterSpacing: -0.8,
            color: Color(0xFF333333),
          ),
        ),
        const SizedBox(height: 16),
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildProgressItem('ÏπúÏ†àÌïú ÏÑúÎπÑÏä§', 92, true),
              const SizedBox(height: 16),
              _buildProgressItem('Ïã†ÏÑ†Ìïú Ïû¨Î£å', 81, true),
              const SizedBox(height: 16),
              _buildProgressItem('ÎÑìÍ≥† ÏæåÏ†ÅÌïú Í≥µÍ∞Ñ', 87, true),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildImprovementAreasSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Ïù¥Îü∞ Ï†êÏù¥ ÏïÑÏâ¨ÏõåÏöî!',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            letterSpacing: -0.8,
            color: Color(0xFF333333),
          ),
        ),
        const SizedBox(height: 16),
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildProgressItem('Î∂ÄÏ°±Ìïú Ï£ºÏ∞®Í≥µÍ∞Ñ', 23, false),
              const SizedBox(height: 16),
              _buildProgressItem('Ï†ÅÏùÄ ÏùåÏãùÏñë', 19, false),
              const SizedBox(height: 16),
              _buildProgressItem('Í∏¥ ÎåÄÍ∏∞ÏãúÍ∞Ñ', 12, false),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildProgressItem(String title, int percentage, bool isGood) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 15,
                fontWeight: FontWeight.w500,
                letterSpacing: -0.8,
                color: Color(0xFF333333),
              ),
            ),
            Text(
              '$percentage%',
              style: TextStyle(
                fontSize: 15,
                fontWeight: FontWeight.w600,
                letterSpacing: -0.8,
                color: isGood ? const Color(0xFF00AEFF) : const Color(0xFF666666),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        Container(
          height: 6,
          decoration: BoxDecoration(
            color: const Color(0xFFF5F5F5), // Î∞∞Í≤ΩÏÉâÏùÑ Îçî Ïó∞ÌïòÍ≤å
            borderRadius: BorderRadius.circular(CommonStyles.chipRadius),
          ),
          child: FractionallySizedBox(
            alignment: Alignment.centerLeft,
            widthFactor: percentage / 100,
            child: Container(
              decoration: BoxDecoration(
                color: isGood ? const Color(0xFFB8E6FF) : const Color(0xFFE0E0E0), // Î∞î ÏÉâÏÉÅÏùÑ Îçî Ïó∞ÌïòÍ≤å
                borderRadius: BorderRadius.circular(CommonStyles.chipRadius),
              ),
            ),
          ),
        ),
      ],
    );
  }

  // (ÎØ∏ÏÇ¨Ïö©) Ïû¨Î∂ÑÏÑù ÏöîÏ≤≠ UI Ï†úÍ±∞

  // (ÏÇ≠Ï†ú) ÏÉÅÎã® Î°úÎî© Ïπ¥Îìú ÏÇ¨Ïö© Ïïà Ìï®

  // ========== Ïò§Î•ò ÏÉÅÌÉú ==========
  Widget _buildErrorSection() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.red[50],
        borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
        border: Border.all(color: Colors.red[200]!),
      ),
      child: Column(
        children: [
          Icon(
            Icons.error_outline_rounded,
            size: 48,
            color: Colors.red[400],
          ),
          const SizedBox(height: 16),
          Text(
            'Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.red[700],
              letterSpacing: -0.8,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _errorMessage.isNotEmpty ? _errorMessage : 'Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 14,
              color: Colors.red[600],
              height: 1.4,
            ),
          ),
          const SizedBox(height: 20),
          Row(
            children: [
              Expanded(
                child: SizedBox(
                  height: 44,
                  child: OutlinedButton(
                    onPressed: () {
                      setState(() {
                        _hasError = false;
                        _errorMessage = '';
                      });
                    },
                    style: OutlinedButton.styleFrom(
                      foregroundColor: Colors.red[600],
                      side: BorderSide(color: Colors.red[300]!),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(CommonStyles.buttonRadius),
                      ),
                    ),
                    child: const Text('Îã§Ïãú ÏãúÎèÑ'),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: SizedBox(
                  height: 44,
                  child: ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _hasError = false;
                        _errorMessage = '';
                        _showAnalysisResults = false;
                      });
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red[600],
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(CommonStyles.buttonRadius),
                      ),
                      elevation: 0,
                    ),
                    child: const Text('ÏÉàÎ°ú ÏãúÏûë'),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // ========== Ïï°ÏÖò Î≤ÑÌäºÎì§ ==========
  Widget _buildActionButtons() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Î∂ÑÏÑù Í≤∞Í≥º ÌôúÏö©',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w700,
            color: Color(0xFF333333),
            letterSpacing: -0.8,
          ),
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: _buildActionButton(
                icon: Icons.download_rounded,
                label: 'PDF Îã§Ïö¥Î°úÎìú',
                onTap: _downloadPDF,
                color: const Color(0xFF666666), // Ï∞®Î∂ÑÌïú ÌöåÏÉâ
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildActionButton(
                icon: Icons.table_chart,
                label: 'CSV Îã§Ïö¥Î°úÎìú',
                onTap: _downloadCSV,
                color: const Color(0xFF666666), // Ï∞®Î∂ÑÌïú ÌöåÏÉâ
              ),
            ),
          ],
        ),
        const SizedBox(height: 12),
        Row(
          children: [
            Expanded(
              child: _buildActionButton(
                icon: Icons.share_rounded,
                label: 'Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú†',
                onTap: _shareToKakao,
                color: const Color(0xFF666666), // Ï∞®Î∂ÑÌïú ÌöåÏÉâ
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: _buildActionButton(
                icon: Icons.email_rounded,
                label: 'Ïù¥Î©îÏùº Í≥µÏú†',
                onTap: _shareToEmail,
                color: const Color(0xFF666666), // Ï∞®Î∂ÑÌïú ÌöåÏÉâ
              ),
            ),
          ],
        ),

      ],
    );
  }

  // (ÏÇ≠Ï†ú) ÌïòÎã® Ïä§ÌÅ¨ÎûòÌïë ÏöîÏ≤≠ Î≤ÑÌäº

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    required Color color,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        height: 74,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(CommonStyles.cardRadius),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: color, size: 24),
            const SizedBox(height: 6),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w600,
                color: color,
                letterSpacing: -0.8,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // ========== Ïï°ÏÖò Í∏∞Îä•Îì§ ==========
  
  // PDF Îã§Ïö¥Î°úÎìú
  void _downloadPDF() {
    // TODO: Ïã§Ï†ú PDF ÏÉùÏÑ± Î∞è Îã§Ïö¥Î°úÎìú Î°úÏßÅ Íµ¨ÌòÑ
    _showMessage('PDF Îã§Ïö¥Î°úÎìúÍ∞Ä ÏãúÏûëÎê©ÎãàÎã§.');
  }

  // CSV Îã§Ïö¥Î°úÎìú
  void _downloadCSV() {
    // TODO: Ïã§Ï†ú CSV ÏÉùÏÑ± Î∞è Îã§Ïö¥Î°úÎìú Î°úÏßÅ Íµ¨ÌòÑ
    _showMessage('CSV Îã§Ïö¥Î°úÎìúÍ∞Ä ÏãúÏûëÎê©ÎãàÎã§.');
  }

  // Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú†
  void _shareToKakao() {
    // TODO: Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† API Ïó∞Îèô
    _showMessage('Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú† Í∏∞Îä•ÏùÑ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  }

  // Ïù¥Î©îÏùº Í≥µÏú†
  void _shareToEmail() {
    // TODO: Ïù¥Î©îÏùº Í≥µÏú† Í∏∞Îä• Íµ¨ÌòÑ
    _showMessage('Ïù¥Î©îÏùº Í≥µÏú† Í∏∞Îä•ÏùÑ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
  }

  // Î©îÏãúÏßÄ ÌëúÏãú (ScaffoldMessenger ÎåÄÏã† ÏÇ¨Ïö©)
  void _showMessage(String message) {
    // Í∞ÑÎã®Ìïú ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÎåÄÏã† ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Î°ú ÌëúÏãú
    setState(() {
      // Î©îÏãúÏßÄÎ•º ÌëúÏãúÌï† ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä ÌïÑÏöî
    });
    
    // ÌïÑÏöî Ïãú Ïä§ÎÇµÎ∞î ÏÇ¨Ïö©ÏúºÎ°ú ÍµêÏ≤¥ Í∞ÄÎä•
  }

  // ========== Ïä§ÌÅ¨ÎûòÌïë ÏöîÏ≤≠ Î°úÏßÅ ==========
  Future<void> _requestScraping() async {
    final userStoreId = await UserDataService.getUserStoreId();
    if (!mounted) return;
    if (userStoreId == null || userStoreId.isEmpty) {
      _showSnackBar('Ïä§ÌÜ†Ïñ¥ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. ÎßàÏù¥ÌéòÏù¥ÏßÄÏóêÏÑú Í∞ÄÍ≤å Îì±Î°ù/ÏÑ†ÌÉù ÌõÑ Ïù¥Ïö©Ìï¥ Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setState(() {
      _isAnalyzing = true;
      _hasError = false;
      _errorMessage = '';
    });

    try {
      final res = await _scraper.scrapeReviews(userStoreId: userStoreId);
      // Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨ Ïó¨Î∂Ä Ï∂îÏ†ï Ï≤òÎ¶¨
      bool hasData = true;
      final data = res['data'];
      if (data == null) {
        hasData = false;
      } else if (data is Map && data.containsKey('reviews')) {
        final reviews = data['reviews'];
        if (reviews is List && reviews.isEmpty) {
          hasData = false;
        }
      }

      if (!mounted) return;
      setState(() {
        _hasData = hasData;
      });

      _showSnackBar('Ïä§ÌÅ¨ÎûòÌïëÏùÑ ÏãúÏûëÌñàÏñ¥Ïöî! Î∂ÑÏÑùÏùÑ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
    } on DioException catch (e) {
      String message = 'Ïä§ÌÅ¨ÎûòÌïë ÏöîÏ≤≠ Ïã§Ìå®';
      final data = e.response?.data;
      if (data is Map && data['message'] is String && (data['message'] as String).isNotEmpty) {
        message = data['message'];
      } else if (e.message != null && e.message!.isNotEmpty) {
        message = e.message!;
      }
      if (!mounted) return;
      setState(() {
        _hasError = true;
        _errorMessage = message;
      });
      _showSnackBar(message);
    } finally {
      if (!mounted) return;
      setState(() {
        _isAnalyzing = false;
      });
    }
  }

  void _showSnackBar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }
} 